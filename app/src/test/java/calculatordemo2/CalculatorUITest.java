/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculatordemo2;

import javax.swing.JTextArea;
import javax.swing.JButton;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
import java.awt.event.ActionEvent;
import java.lang.reflect.Field;  // This brings in the Field feature of Java Reflection
import calculatordemo2.panel.CreatePanel;

class CalculatorUITest {

    private static CalculatorUI classUnderTest;
    private static JButton jButtons[];

    @BeforeAll
    public static void setUp() {
        CreatePanel.createDigitPanel();
        CreatePanel.createCancelPanel();
        classUnderTest = new CalculatorUI();
        jButtons = new JButton[10];
        for (int i = 0; i < 10; i++) {
            jButtons[i] = CreatePanel.digitButtons[i];
        }
        classUnderTest.text.setText("");
    }

    @DisplayName("Testing that writer writes the display")
    @Test
    public void writerSetText() throws Exception {
        // Use reflection to access the private field “text”
        Class cls = classUnderTest.getClass();
        Field field = cls.getDeclaredField("text");
        field.setAccessible(true);
        // Set the value of “text” to “mytext”
        JTextArea text = (JTextArea) field.get(classUnderTest);
        text.setText("mytext");
        // Test that the value of “text” is “mytext”
        assertEquals("mytext", text.getText());
    }
    
    @Test 
    void appPanelIsCreated() {
        assertNotNull(classUnderTest, "app should have a panel object");
    }

// Reader Unit Test
    @Test
    public void ReaderValidInput() {
        CalculatorUI calculatorUI = new CalculatorUI();
        // Add a valid num
        calculatorUI.text.setText("89.3"); 
        Double result = calculatorUI.reader();
        assertEquals(89.3, result, 0.001); 
    }

// Writer Unit Test
    @Test
    public void WriterValidInput() {
        CalculatorUI calculatorUI = new CalculatorUI();
        // Check for a valid number
        calculatorUI.writer(39.7); 
        // See if text field is updated in the right way
        assertEquals("39.7", calculatorUI.text.getText());  
    }

    @DisplayName("Testing Display of Single Digit Button")
    @Test
    public void displaySingleDigit() {
        classUnderTest.text.setText("");
        ActionEvent e = new ActionEvent(jButtons[1], ActionEvent.ACTION_PERFORMED, "");
        classUnderTest.actionPerformed(e);
        String expectedDisplayText = CreatePanel.digitValue[1];
        String actualDisplayText = classUnderTest.text.getText();
        assertEquals(expectedDisplayText, actualDisplayText);
    }
    
    @DisplayName("Testing Display of Two Digit Buttons")
    @Test
    public void displayTwoDigits() {
        classUnderTest.text.setText("");
        ActionEvent e1 = new ActionEvent(jButtons[2], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e2 = new ActionEvent(jButtons[3], ActionEvent.ACTION_PERFORMED, "");
        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        String expectedDisplayText = CreatePanel.digitValue[2] + CreatePanel.digitValue[3];
        String actualDisplayText = classUnderTest.text.getText();
        assertEquals(expectedDisplayText, actualDisplayText);
    }

    @DisplayName("Testing Display after Cancel Button")
    @Test
    public void clearDisplay() {
        ActionEvent e1 = new ActionEvent(CreatePanel.digitButtons[4], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e2 = new ActionEvent(CreatePanel.cancel, ActionEvent.ACTION_PERFORMED, "");
        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        String expectedDisplayText = "";
        String actualDisplayText = classUnderTest.text.getText();
        assertEquals(expectedDisplayText, actualDisplayText);
    }

}

