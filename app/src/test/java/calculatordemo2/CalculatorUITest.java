/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculatordemo2;

import javax.swing.JTextArea;
import javax.swing.JButton;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
import java.awt.event.ActionEvent;
import java.lang.reflect.Field;  // This brings in the Field feature of Java Reflection
import calculatordemo2.panel.CreatePanel;

class CalculatorUITest {

    private static CalculatorUI classUnderTest;
    private static JButton jButtons[];

    @BeforeAll
    public static void setUp() {
        CreatePanel.createMainPanel();
        CreatePanel.createTrigPanel();
        CreatePanel.createDigitPanel();
        CreatePanel.createZeroCancelPanel();
        CreatePanel.createBasicFunctionPanel();
        CreatePanel.createPrimitiveOperationPanel();
        classUnderTest = new CalculatorUI();
        jButtons = new JButton[10];
        for (int i = 0; i < 10; i++) {
            jButtons[i] = CreatePanel.digitButtons[i];
        }
        classUnderTest.text.setText("");
    }

    @AfterEach
    public void cleanUp() {
        classUnderTest.text.setText("");
    }


    @DisplayName("Testing that writer writes the display")
    @Test
    public void writerSetText() throws Exception {
        // Use reflection to access the private field “text”
        Class cls = classUnderTest.getClass();
        Field field = cls.getDeclaredField("text");
        field.setAccessible(true);
        // Set the value of “text” to “mytext”
        JTextArea text = (JTextArea) field.get(classUnderTest);
        text.setText("mytext");
        // Test that the value of “text” is “mytext”
        assertEquals("mytext", text.getText());
    }
    
    @Test 
    void appPanelIsCreated() {
        assertNotNull(classUnderTest, "app should have a panel object");
    }

// Reader Unit Test
    @Test
    public void ReaderValidInput() {
        CalculatorUI calculatorUI = new CalculatorUI();
        // Add a valid num
        calculatorUI.text.setText("89.3"); 
        Double result = calculatorUI.reader();
        assertEquals(89.3, result, 0.001); 
    }

// Writer Unit Test
    @Test
    public void WriterValidInput() {
        CalculatorUI calculatorUI = new CalculatorUI();
        // Check for a valid number
        calculatorUI.writer(39.7); 
        // See if text field is updated in the right way
        assertEquals("39.7", calculatorUI.text.getText());  
    }

    @DisplayName("Testing Display of Single Digit Button")
    @Test
    public void displaySingleDigit() {
        // Reset text field
        classUnderTest.text.setText("");

        // Simulate pressing the "1" button
        ActionEvent e = new ActionEvent(jButtons[1], ActionEvent.ACTION_PERFORMED, "");
        classUnderTest.actionPerformed(e);

        // Expected: Text field displays "1"
        String expectedDisplayText = CreatePanel.digitValue[1];
        // Actual: Text displayed on the calculator
        String actualDisplayText = classUnderTest.text.getText();
        // Verify that the expected display matches the actual display
        assertEquals(expectedDisplayText, actualDisplayText);
    }
    
    @DisplayName("Testing Display of Three Digit Buttons")
    @Test
    public void displayThreeDigits() {
        // Reset the text field
        classUnderTest.text.setText("");
    
        // Simulate pressing buttons "2", then "3", then "5"
        ActionEvent e1 = new ActionEvent(jButtons[2], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e2 = new ActionEvent(jButtons[3], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e3 = new ActionEvent(jButtons[5], ActionEvent.ACTION_PERFORMED, "");
    
        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e3);
    
        // Expected: Text field displays "235"
        String expectedDisplayText = CreatePanel.digitValue[2] + CreatePanel.digitValue[3] + CreatePanel.digitValue[5];
        // Actual: Text displayed on the calculator
        String actualDisplayText = classUnderTest.text.getText();
    
        // Verify that the expected display matches the actual display
        assertEquals(expectedDisplayText, actualDisplayText);
    }
    

    @DisplayName("Testing Display after Addition Operation")
    @Test
    public void addOperationDisplay() {
        // Reset the text field
        classUnderTest.text.setText("");

        // Simulate pressing the buttons "6" "+" "8" "="
        ActionEvent e1 = new ActionEvent(jButtons[6], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e2 = new ActionEvent(CreatePanel.add, ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e3 = new ActionEvent(jButtons[8], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e4 = new ActionEvent(CreatePanel.equal, ActionEvent.ACTION_PERFORMED, "");

        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e3);
        classUnderTest.actionPerformed(e4);

        // Expected: Text field displays "14.0"
        String expectedDisplayText = "14.0";
        // Actual: Text displayed on the calculator
        String actualDisplayText = classUnderTest.text.getText();
        // Verify that the expected display matches the actual display
        assertEquals(expectedDisplayText, actualDisplayText);
    }

    @DisplayName("Testing Display after Subtraction Operation")
    @Test
    public void subOperationDisplay() {
        // Reset the text field
        classUnderTest.text.setText("");

        // Simulate pressing the buttons "7" "-" "9" "="
        ActionEvent e1 = new ActionEvent(jButtons[7], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e2 = new ActionEvent(CreatePanel.sub, ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e3 = new ActionEvent(jButtons[9], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e4 = new ActionEvent(CreatePanel.equal, ActionEvent.ACTION_PERFORMED, "");

        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e3);
        classUnderTest.actionPerformed(e4);

        // Expected: Text field displays "-2.0"
        String expectedDisplayText = "-2.0";
        // Actual: Text displayed on the calculator
        String actualDisplayText = classUnderTest.text.getText();
        // Verify that the expected display matches the actual display
        assertEquals(expectedDisplayText, actualDisplayText);
    } 

    @DisplayName("Testing Display after Square Root Operation")
    @Test
    public void sqrRtOperationDisplay() {
        // Reset the text field
        classUnderTest.text.setText("");

        // Simulate pressing the buttons "1" "0" "0" "sqrRt"
        ActionEvent e1 = new ActionEvent(jButtons[1], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e2 = new ActionEvent(jButtons[0], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e3 = new ActionEvent(CreatePanel.sqrRt, ActionEvent.ACTION_PERFORMED,"");

        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e3);

        // Expected: Text field displays "10.0"
        String expectedDisplayText = "10.0";
        // Actual: Text displayed on the calculator
        String actualDisplayText = classUnderTest.text.getText();
        // Verify that the expected display matches the actual display
        assertEquals(expectedDisplayText, actualDisplayText);
    }

    @DisplayName("Testing Display after Multiple Primitive Operations")
    @Test
    public void complexOperationsDisplay() {
        // Reset the text field
        classUnderTest.text.setText("");

        // Simulate pressing the buttons "2" "+" "3" "*" "4" "-" "6" "/" "2" "="
        ActionEvent e1 = new ActionEvent(jButtons[2], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e2 = new ActionEvent(CreatePanel.add, ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e3 = new ActionEvent(jButtons[3], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e4 = new ActionEvent(CreatePanel.mult, ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e5 = new ActionEvent(jButtons[4], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e6 = new ActionEvent(CreatePanel.sub, ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e7 = new ActionEvent(jButtons[6], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e8 = new ActionEvent(CreatePanel.div, ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e9 = new ActionEvent(jButtons[2], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e10 = new ActionEvent(CreatePanel.equal, ActionEvent.ACTION_PERFORMED, "");

        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e3);
        classUnderTest.actionPerformed(e4);
        classUnderTest.actionPerformed(e5);
        classUnderTest.actionPerformed(e6);
        classUnderTest.actionPerformed(e7);
        classUnderTest.actionPerformed(e8);
        classUnderTest.actionPerformed(e9);
        classUnderTest.actionPerformed(e10);

        // Expected: Text field displays "7.0"
        String expectedDisplayText = "7.0";
        // Actual: Text displayed on the calculator
        String actualDisplayText = classUnderTest.text.getText();
        // Verify that the expected display matches the actual display
        assertEquals(expectedDisplayText, actualDisplayText);
    }


    @DisplayName("Testing Display after Trig Functions")
    @Test
    public void trigFunctionsDisplay() {
        // Reset the text field
        classUnderTest.text.setText("");

        // Sine: sin(30°) ≈ 0.5
        // Simulate pressing buttons "3", "0", and "sin"
        ActionEvent e1 = new ActionEvent(jButtons[3], ActionEvent.ACTION_PERFORMED,"");
        ActionEvent e2 = new ActionEvent(jButtons[0], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e3 = new ActionEvent(CreatePanel.sin, ActionEvent.ACTION_PERFORMED, "");

        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e3);

        // Expected: The text field displays 0.5
        double expectedValueSin = 0.5;
        // Actual: Text displayed on the calculator, parsed as a double
        double actualValueSin = Double.parseDouble(classUnderTest.text.getText());
        // Tolerance for comparing double values
        double epsilon = 1e-10;
        // Verify that the expected value is within tolerance of the actual value
        assertEquals(expectedValueSin, actualValueSin, epsilon, "Sine result matches the expected value with tolerance");
    

        // Reset the text field
        classUnderTest.text.setText("");

        // Cosine: cos(180°) ≈ -1.0
        // Simulate pressing buttons "1", "8", "0", and "cos"
        ActionEvent e4 = new ActionEvent(jButtons[1], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e5 = new ActionEvent(jButtons[8], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e6 = new ActionEvent(CreatePanel.cos, ActionEvent.ACTION_PERFORMED, "");

        classUnderTest.actionPerformed(e4);
        classUnderTest.actionPerformed(e5);
        classUnderTest.actionPerformed(e2);
        classUnderTest.actionPerformed(e6);

        // Expected: The text field displays -1.0
        double expectedValueCos = -1.0;
        // Actual: Text displayed on the calculator
        double actualValueCos = Double.parseDouble(classUnderTest.text.getText());
        // Verify that the actual value is close to the expected value within epsilon
        assertEquals(expectedValueCos, actualValueCos, epsilon, "Cosine result matches the expected value with tolerance");

        // Reset the text field
        classUnderTest.text.setText("");

        // Tangent: tan(45°) = 1.0
        // Simulate pressing buttons "4", "5", and "tan"
        ActionEvent e7 = new ActionEvent(jButtons[4], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e8 = new ActionEvent(jButtons[5], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e9 = new ActionEvent(CreatePanel.tan, ActionEvent.ACTION_PERFORMED, "");

        classUnderTest.actionPerformed(e7);
        classUnderTest.actionPerformed(e8);
        classUnderTest.actionPerformed(e9);

        // Expected: The text field displays 1.0
        double expectedValueTan = 1.0;
        // Actual: Text displayed on the calculator
        double actualValueTan = Double.parseDouble(classUnderTest.text.getText());
        // Verify that the expected display matches the actual display
        assertEquals(expectedValueTan, actualValueTan, epsilon, "Tangent result matches with expected value with tolerance");
    }


    @DisplayName("Testing Display after Cancel Button")
    @Test
    public void clearDisplay() {
        // Simulate pressing the buttons "4" "C" (cancel)
        ActionEvent e1 = new ActionEvent(CreatePanel.digitButtons[4], ActionEvent.ACTION_PERFORMED, "");
        ActionEvent e2 = new ActionEvent(CreatePanel.cancel, ActionEvent.ACTION_PERFORMED, "");

        classUnderTest.actionPerformed(e1);
        classUnderTest.actionPerformed(e2);

        // Expected: Text field displays ""
        String expectedDisplayText = "";
        // Actual: Text displayed on the calculator
        String actualDisplayText = classUnderTest.text.getText();
        // Verify that the expected display matches the actual display
        assertEquals(expectedDisplayText, actualDisplayText);
    }

}

